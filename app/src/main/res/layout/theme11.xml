<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" >

            <TextView
                style="@style/Title"
                android:text="Методы"/>

            <com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView
                android:id="@+id/youtube_player_view"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="8dp" />

            <TextView
                style="@style/MyStyle"
                android:text="  Методы - кострукции, которые используются для упрощения программ. В них содержится часто используемый код. Так записав его в методе один раз, можено использовать его множество раз, вызывая метод. Методы бывают двух типов: \n 1. Методы ничего не возвращающие - void \n 2. Методы с конкретным типом \n  Приведу примеры:"/>

            <TextView
                style="@style/Code"
                android:text="Синтаксис: \nмодификатор спецификатор тип_возвращаемых данных Имя(параметры){} \npublic static void Print(int a) => Console.VriteLine(a); \nВ данном примере также демонстрируется то, что если в методе исполняется лишь одна строка, то можно записать =>"/>

            <TextView
                style="@style/MyStyle"
                android:text="Модификаторы доступа: \n - public - доступен во всех местах программы \n - protected - доступен в классе и его наследниках \n - private - доступен только для объектов класса"/>

            <ImageView
                style="@style/Image"
                android:src="@drawable/theme11_1"
                android:layout_height="200dp"/>

            <TextView
                style="@style/MyStyle"
                android:text="  Спецификатор static означает, что метод может использоваться без создания экземпляра класса, как в нашем примере. Это сейчас может быть сложно, но в следующей теме станет понятнее. return - возврашает значение, а тип значения указан в объявлении метода"/>

            <TextView
                style="@style/MyStyle"
                android:text="  Также следует объяснить про параметры в методе. Есть формальные и фактические параметры. Фомальные - это array в объявлении метода, а фактические - это arr, который получает метод. Можно создавать методы с одинаковым названием, но они должны отличаться типом возвращаемого значения или принимаемыми параметрами, это называется перегрузкой метода. Это пример Полиморфизма. Сведения просто для галочки, в следующей лекции разберемся что это такое. "/>

            <TextView
                style="@style/MyStyle"
                android:text="А сейчас мы разберемся с передачей параметров. Есть три типа передачи: \n1. Передача значения(уже видели) \n2. Передача ссылки(ref) \n3. Передача ссылки с обязательством инициализации(out) \nВот пример:"/>

            <ImageView
                style="@style/Image"
                android:src="@drawable/theme11_2"
                android:layout_height="200dp"/>

            <TextView
                style="@style/MyStyle"
                android:text="  В данном случай выведится 8, 9, 5. При этом a1 не изменится, а a2 и a3 поменяют свои значения в основной программе."/>

            <TextView
                style="@style/MyStyle"
                android:text="  Кроме того, есть необязательные параметры. С ними все просто, если задать их значение при объявлении метода, то при вызове можно не указывать значение необязательного параметра, а будет использовано значение по умолчанию. Но надо запомнить, что все необязательные параметры должны объявляться после обязательных."/>

            <TextView
                style="@style/MyStyle"
                android:text="Практическое задание: \nЗадание 1: написать метод, который вычисляет значение x=sin2(a) и y=cos2(a). Написать таблицу значений от -π до π с шагом π/4.

\nЗадание 2: даны координаты четырех точек x1, y1, x2, y2, x3, y3, x4, y4. Найти наименьшую из площадей треугольников, вершины которых находятся в заданных точках (формула Герона, минимум из двух чисел)."/>

            <TextView
                android:id="@+id/codeView"
                style="@style/Code"
                android:minHeight="48dp" />

            <Button
                style="@style/Button"/>
        </LinearLayout>
    </ScrollView>

</androidx.constraintlayout.widget.ConstraintLayout>