<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            tools:ignore="ExtraText">

            <TextView
                style="@style/Title"
                android:text="Строки"/>

            <com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView
                android:id="@+id/youtube_player_view"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="8dp" />

            <TextView
                style="@style/MyStyle"
                android:text="  Со строками мы уже немного работали, а потому не будет новостью, что они реализуют интрефейс IEnumerable, то есть их элементы проиндексированны. Строки можно объявить разными способами:
                \n  - string s1 = ''hello'';
            \n  - string s2 = new String('a', 6); // результатом будет строка ''aaaaaa''
            \n  - string s3 = new String(new char[ ] { 'w', 'o', 'r', 'l', 'd' }); //world
            \n  - string s4 = new String(new char[ ] { 'w', 'o', 'r', 'l', 'd' }, 1, 3); // orl
            \n  Кроме того строки имеют свои собственные методы. Вот некоторые из них:
            \n  - string.Compare(s1, s2) - указывает как между собой соотносятся строки
            \n  - CompareOrdinal - сравнивает без учета локали
            \n  - Constains(подстрока) - определяет содержится ли подстрока в строке.
            \n  - IndexOf(подстрока) / LastIndexOf(подстрока) - находит индекс првого / последнего вхождения подстроки в строку
            \n  - Substring(i, n) - извлекает подстроку с позиции i n символов
            \n  - ToUpper / ToLower - переводит строку в верхний / нижний регистр
            \nВот пример работы со строкой: "/>

            <ImageView
                style="@style/Image"
                android:src="@drawable/theme9_1"
                android:layout_height="200dp"/>

            <TextView
                style="@style/MyStyle"
                android:text=" str.Length - это длина строки. А условие указвает, что элемент строки это русская буква от ''а'' до ''м''"/>

            <TextView
                style="@style/MyStyle"
                android:text="Практическое задание: Дана строка, состоящая из слов. Вывести те слова и их количество, которые состоят из букв и читаются слева направо также, как и справа налево."/>

            <TextView
                android:id="@+id/codeView"
                style="@style/Code"
                android:minHeight="48dp" />

            <Button
                style="@style/Button"/>
        </LinearLayout>
    </ScrollView>
</androidx.constraintlayout.widget.ConstraintLayout>